""" Test the game.py module. """

import io
import sys
from unittest import TestCase
from unittest.mock import patch
from game import game


class TestGame(TestCase):
    """ Test the game.py module. """

    @patch('builtins.input', side_effect=['1', 'test player'])
    @patch('sys.stdout', new_callable=io.StringIO)
    def test_follow_path(self, mock_output, mock_input):
        """ Test the follow_path function. """
        enemy = {'hp': 5, 'attack': 1, 'loot': 'potion'}
        game.follow_path(enemy)
        # Check if expected output is present in the output
        # generated by 'follow_path' function
        self.assertIn('You follow the path to the castle.',
                      mock_output.getvalue())
        self.assertIn('The guard asks for your name and business.',
                      mock_output.getvalue())

    @patch('builtins.input', side_effect=['1'])
    @patch('sys.stdout', new_callable=io.StringIO)
    def test_castle_with_enemy(self, mock_output, mock_input):
        """ Test the castle function. """
        enemy = {'hp': 5, 'attack': 1, 'loot': 'potion'}
        game.castle(enemy)
        # Check if expected output is present in the output
        # generated by 'castle' function
        self.assertIn('You are inside the castle.', mock_output.getvalue())
        self.assertIn('The knight shows you the throne room',
                      mock_output.getvalue())

    @patch('builtins.input', side_effect=['2'])
    @patch('sys.stdout', new_callable=io.StringIO)
    def test_castle_without_enemy(self, mock_output, mock_input):
        """ Test the castle function. """
        game.castle(None)
        # Check if expected output is present in the output generated by
        # 'castle' function
        self.assertIn('You are inside the castle.', mock_output.getvalue())
        self.assertIn('The knight shows you the throne room',
                      mock_output.getvalue())

    @patch('builtins.input', side_effect=['1'])
    @patch('sys.stdout', new_callable=io.StringIO)
    def test_explore_forest_with_sword(self, mock_output, mock_input):
        """ Test the explore_forest function. """
        game.explore_forest()
        # Check if expected output is present in the output generated
        # by 'explore_forest' function
        self.assertIn('You wander through the forest.', mock_output.getvalue())
        self.assertIn('You notice a sword lying on the ground',
                      mock_output.getvalue())

    @patch('builtins.input', side_effect=['2'])
    @patch('sys.stdout', new_callable=io.StringIO)
    def test_explore_forest_without_sword(self, mock_output, mock_input):
        """ Test the explore_forest function. """
        game.explore_forest()
        self.assertIn('You wander through the forest.', mock_output.getvalue())
        self.assertIn('You leave the sword and continue',
                      mock_output.getvalue())

    @patch('builtins.input', side_effect=['1', '1'])
    @patch('sys.stdout', new_callable=io.StringIO)
    def test_combat_player_wins(self, mock_output, mock_input):
        """ Test the combat function. """
        game.combat(10, 2, 5, 1)
        self.assertIn('A wild enemy appears!', mock_output.getvalue())
        self.assertIn('Player defeats the enemy!', mock_output.getvalue())

    @patch('builtins.input', side_effect=['1', '2'])
    @patch('sys.stdout', new_callable=io.StringIO)
    def test_combat_enemy_wins(self, mock_output, mock_input):
        """ Test the combat function. """
        game.combat(5, 1, 10, 2)
        self.assertIn('A wild enemy appears!', mock_output.getvalue())
        self.assertIn('Player is defeated...', mock_output.getvalue())

    @patch('builtins.input', side_effect=['invalid', '2'])
    @patch('sys.stdout', new_callable=io.StringIO)
    def test_get_choice_invalid_input(self, mock_output, mock_input):
        """ Test the get_choice function. """
        result = game.get_choice()
        self.assertEqual(result, '2')

    @patch('builtins.input', side_effect=['help', '2'])
    @patch('sys.stdout', new_callable=io.StringIO)
    def test_get_choice_help_command(self, mock_output, mock_input):
        """ Test the get_choice function. """
        result = game.get_choice()
        self.assertEqual(result, '2')


def main():
    """ Main function. """
    TestGame()
    print("All tests passed.")


if __name__ == "__main__":
    main()
